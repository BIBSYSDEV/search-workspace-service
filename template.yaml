AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Search Workspace Service API and Handlers
Globals:
  Function:
    Timeout: 60
    MemorySize: 1800
    Environment:
      Variables:
        ELASTICSEARCH_REGION: "eu-west-1"
        SCOPE_IDENTIFIER: !Sub 'https://api.${CustomDomain}/scopes'

  Api:
    Cors:
      AllowMethods: "'PUT, GET,OPTIONS,DELETE,POST'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Parameters:
  ApiDomain:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: The Api domain
    Default: /SWS/ApiDomain
  CustomDomain:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Custom API to connect this lambda to
    Default: CustomDomain

  ElasticSearchSize:
    Type: String
    AllowedValues:
      - small
      - large


Conditions:
  LargeElasticSearch:  !Equals [ !Ref ElasticSearchSize, 'large' ]


Resources:
  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup

  ReadOnlyAccessElasticSearchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ lambda.amazonaws.com ]
            Action: [ 'sts:AssumeRole' ]
      Policies:
        - PolicyName: writeLog
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*'
        - PolicyName: readIdentitySecret
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:IdentityServiceSecret*'

  SWSLambdaTriggerRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: writeLog
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*'
        - PolicyName: writeReadOpenSearch
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - es:ESHttpPost
                  - es:ESHttpPut
                  - es:ESHttpGet
                  - es:ESHttpHead
                Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/*'
        - PolicyName: invokeLambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: "*"

  SWSOpenSearch:
    Type: AWS::OpenSearchService::Domain
    Properties:
      AccessPolicies:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt ReadOnlyAccessElasticSearchRole.Arn
            Action:
              - es:ESHttpPost
              - es:ESHttpGet
              - es:ESHttpPut
              - es:ESHttpHead
            Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/*'
      ClusterConfig: !If [ LargeElasticSearch,
        {
            DedicatedMasterEnabled: true,
            DedicatedMasterType: t2.medium.search,
            DedicatedMasterCount: 3,
            InstanceCount: 2,
            ZoneAwarenessEnabled: false,
            InstanceType: t2.medium.search
        },
        {
          DedicatedMasterEnabled: false,
          InstanceCount: 1,
          ZoneAwarenessEnabled: false,
          InstanceType: t2.medium.search
        }
      ]
      EngineVersion: "OpenSearch_1.3"
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10
        VolumeType: gp2
      CognitoOptions:
        Enabled: false

  SWSApi:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApiAccessLogGroup.Arn
        Format: '{ "apiId": "$context.apiId", "requestId": "$context.requestId", "requestTime": "$context.requestTime", "requestTimeEpoch": "$context.requestTimeEpoch", "httpMethod": "$context.httpMethod", "path": "$context.path", "status": "$context.status",  "error.message": "$context.error.message" }'
      StageName: Prod
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: ./docs/openapi.yaml

  CustomCodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service: [ codedeploy.amazonaws.com ]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRoleForLambda

  IndexHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Description: Index handler for indeces within a workspace
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          OPENSEARCH_ENDPOINT_PROTOCOL: "https"
          OPENSEARCH_ENDPOINT_ADDRESS: !GetAtt SWSOpenSearch.DomainEndpoint
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
      Events:
        PutEvent:
          Type: Api
          Properties:
            Method: put
            Path: /{resource+}
            RestApiId: !Ref SWSApi
        HeadEvent:
         Type: Api
         Properties:
           Method: head
           Path: /{resource+}
           RestApiId: !Ref SWSApi
        DeleteEvent:
          Type: Api
          Properties:
            Method: delete
            Path: /{resource+}
            RestApiId: !Ref SWSApi
        GetEvent:
          Type: Api
          Properties:
            Method: get
            Path: /{resource+}
            RestApiId: !Ref SWSApi
        PostEvent:
          Type: Api
          Properties:
            Method: post
            Path: /{resource+}
            RestApiId: !Ref SWSApi
      Handler: no.sikt.sws.IndexHandler::handleRequest
      Runtime: java11
      Role: !GetAtt SWSLambdaTriggerRole.Arn

  WorkspaceHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Description: Handler for workspace - listing indeces and showing account identifier
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          OPENSEARCH_ENDPOINT_PROTOCOL: "https"
          OPENSEARCH_ENDPOINT_ADDRESS: !GetAtt SWSOpenSearch.DomainEndpoint
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
      Events:
        GetEvent:
          Type: Api
          Properties:
            Method: get
            Path: /
            RestApiId: !Ref SWSApi
      Handler: no.sikt.sws.WorkspaceHandler::handleRequest
      Runtime: java11
      Role: !GetAtt SWSLambdaTriggerRole.Arn


  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      MfaConfiguration: "OFF"
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: false
      UsernameConfiguration:
        CaseSensitive: true
      UserPoolName: "SWSUserPool"

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      Domain: "sws-auth"

  ResourceServerScopes:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties:
      Identifier: !Sub 'https://api.${CustomDomain}/scopes'
      Name: Scopes for backend
      Scopes:
        - ScopeDescription: Scope for accessing sondres workspace
          ScopeName: workspace-sondre
        - ScopeDescription: Scope for accessing fredriks workspace
          ScopeName: workspace-fredrik
        - ScopeDescription: Scope for accessing stigs workspace
          ScopeName: workspace-stig
        - ScopeDescription: Scope for accessing marinas workspace
          ScopeName: workspace-marina
      UserPoolId: !Ref UserPool

  BackendApplicationSondreClient:
    DependsOn: ResourceServerScopes
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      AllowedOAuthFlows:
        - client_credentials
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - !Sub 'https://api.${CustomDomain}/scopes/workspace-sondre'
      ClientName: BackendApplicationSondreClient
      CallbackURLs:
        - !Sub 'https://api.${CustomDomain}/scopes' # not necessary maybe.
      DefaultRedirectURI: !Sub 'https://api.${CustomDomain}/scopes'
      ExplicitAuthFlows:
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: true
      IdTokenValidity: 15
      AccessTokenValidity: 15
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes

  BackendApplicationFredrikClient:
    DependsOn: ResourceServerScopes
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      AllowedOAuthFlows:
        - client_credentials
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - !Sub 'https://api.${CustomDomain}/scopes/workspace-fredrik'
      ClientName:   BackendApplicationFredrikClient
      CallbackURLs:
        - !Sub 'https://api.${CustomDomain}/scopes' # not necessary maybe.
      DefaultRedirectURI: !Sub 'https://api.${CustomDomain}/scopes'
      ExplicitAuthFlows:
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: true
      IdTokenValidity: 15
      AccessTokenValidity: 15
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes


  BackendApplicationStigClient:
    DependsOn: ResourceServerScopes
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      AllowedOAuthFlows:
        - client_credentials
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - !Sub 'https://api.${CustomDomain}/scopes/workspace-stig'
      ClientName: BackendApplicationStigClient
      CallbackURLs:
        - !Sub 'https://api.${CustomDomain}/scopes' # not necessary maybe.
      DefaultRedirectURI: !Sub 'https://api.${CustomDomain}/scopes'
      ExplicitAuthFlows:
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: true
      IdTokenValidity: 15
      AccessTokenValidity: 15
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes

  BackendApplicationMarinaClient:
    DependsOn: ResourceServerScopes
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      AllowedOAuthFlows:
        - client_credentials
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - !Sub 'https://api.${CustomDomain}/scopes/workspace-marina'
      ClientName: BackendApplicationMarinaClient
      CallbackURLs:
        - !Sub 'https://api.${CustomDomain}/scopes' # not necessary maybe.
      DefaultRedirectURI: !Sub 'https://api.${CustomDomain}/scopes'
      ExplicitAuthFlows:
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: true
      IdTokenValidity: 15
      AccessTokenValidity: 15
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes