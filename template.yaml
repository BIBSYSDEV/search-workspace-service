AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Search Workspace Service API and Handlers

Globals:
  Function:
    Timeout: 60
    MemorySize: 1800
    Environment:
      Variables:
        COGNITO_URI: !Ref CognitoUri
  Api:
    Cors:
      AllowMethods: "'PUT, GET,OPTIONS,DELETE,POST'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Parameters:
  CognitoUri:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Reference to Cognito Auth URI
    Default: /NVA/CognitoUri
  CognitoAuthorizerArn:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Reference to Cognito UserPool for the stage
    Default: CognitoAuthorizerArn
  CustomDomain:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Custom API to connect this lambda to
    Default: CustomDomain
  CustomDomainBasePath:
    Type: String
    Description: Base path mapping in CustomDomain
    Default: search
  ResourcesBucket:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /NVA/Events/PersistedEntriesBucketName

  ElasticSearchSize:
    Type: String
    AllowedValues:
      - small
      - large


Conditions:
  LargeElasticSearch:  !Equals [ !Ref ElasticSearchSize, 'large' ]


Resources:
  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup

  ReadOnlyAccessElasticSearchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ lambda.amazonaws.com ]
            Action: [ 'sts:AssumeRole' ]
      Policies:
        - PolicyName: writeLog
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*'
        - PolicyName: readIdentitySecret
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:IdentityServiceSecret*'

  SWSLambdaTriggerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ lambda.amazonaws.com ]
            Action: [ 'sts:AssumeRole' ]
      Policies:
        - PolicyName: writeLog
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*'
        - PolicyName: writeReadOpenSearch
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - es:ESHttpPost
                  - es:ESHttpPut
                  - es:ESHttpGet
                  - es:ESHttpHead
                Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/*'

  SWSOpenSearch:
    Type: AWS::OpenSearchService::Domain
    Properties:
      AccessPolicies:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt ReadOnlyAccessElasticSearchRole.Arn
            Action:
              - es:ESHttpPost
              - es:ESHttpGet
              - es:ESHttpPut
              - es:ESHttpHead
            Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/*'
      ClusterConfig: !If [ LargeElasticSearch,
        {
            DedicatedMasterEnabled: true,
            DedicatedMasterType: t2.medium.search,
            DedicatedMasterCount: 3,
            InstanceCount: 2,
            ZoneAwarenessEnabled: false,
            InstanceType: t2.medium.search
        },
        {
          DedicatedMasterEnabled: false,
          InstanceCount: 1,
          ZoneAwarenessEnabled: false,
          InstanceType: t2.medium.search
        }
      ]
      EngineVersion: "OpenSearch_1.3"
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10
        VolumeType: gp2
      CognitoOptions:
        Enabled: false

  SWSApi:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApiAccessLogGroup.Arn
        Format: '{ "apiId": "$context.apiId", "requestId": "$context.requestId", "requestTime": "$context.requestTime", "requestTimeEpoch": "$context.requestTimeEpoch", "httpMethod": "$context.httpMethod", "path": "$context.path", "status": "$context.status",  "error.message": "$context.error.message" }'
      StageName: Prod
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: ./docs/openapi.yaml

  CustomCodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service: [ codedeploy.amazonaws.com ]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRoleForLambda

  WorkspaceIndexHandler:
    Type: AWS::Serverless::Function
    Properties:
      #CodeUri: demo
      Description: Workspace-index handler
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
      Events:
        RestEvent:
          Type: Api
          Properties:
            Method: post, get
            Path: /workspace
            RestApiId: !Ref SWSApi
      Handler: no.sikt.sws.WorkspaceIndexHandler::handleRequest
      Runtime: java11
      Role: !GetAtt SWSLambdaTriggerRole.Arn