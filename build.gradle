/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/building_java_projects.html
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'checkstyle'
    id 'pmd'
    id 'jacoco'
}

repositories {
    gradlePluginPortal()
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    maven { url = 'https://jitpack.io' }
}

java {
    // added to ensure Compatibility in dev mode for devs with java versions > 11
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    implementation libs.apache.commons

    implementation libs.aws.java.sdk.core

    implementation libs.aws.sdk2.eventbridge
    implementation libs.aws.sdk2.regions
    implementation libs.aws.sdk2.s3
    implementation libs.aws.sdk2.urlconnectionclient
    implementation libs.aws.sdk2.cognitoidentityprovider

    implementation libs.bundles.jackson
    implementation libs.bundles.logging
    implementation libs.bundles.nva

    implementation libs.jacoco.core
    implementation libs.jacoco.report
    implementation libs.json
    implementation libs.jsonld

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation libs.guava

    implementation libs.mockito.core

    implementation libs.nebula.lint
    implementation libs.nva.json
    testImplementation libs.bundles.testing
}
tasks.named('test', Test) {
    useJUnitPlatform()
    failFast = false
    testLogging {
        events = ['skipped', 'passed', 'failed']
        showCauses = true
        exceptionFormat = "full"
    }
}

tasks.named("jacocoTestReport", JacocoReport) {
    dependsOn(tasks.named('test'))
    enabled = true
    reports {
        xml.required = true
        html.required = true
    }
}

tasks.named('jacocoTestCoverageVerification', JacocoCoverageVerification) {
    dependsOn tasks.named('jacocoTestReport', JacocoReport)

    violationRules {

        rule {
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.672 // todo: fix me
            }
        }

        rule {
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 0.738 // todo: fix me
            }
        }
    }
}

tasks.named('check') {
    dependsOn tasks.named('test')
    dependsOn tasks.named('jacocoTestCoverageVerification', JacocoCoverageVerification)
}


pmd {
    toolVersion = '7.13.0'
    ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
    ruleSets = []
    ignoreFailures = false
}

checkstyle {
    toolVersion = '10.23.1'
    configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
    showViolations = true
}

test {
    environment "ALLOWED_ORIGIN", "*"
    environment "COGNITO_HOST", "https://example.com"
    environment "ELASTICSEARCH_REGION", "eu-west-1"
    environment "BACKUP_BUCKET_NAME", "s3-dummy-name"
    environment "OPENSEARCH_ENDPOINT_PROTOCOL", "http"
    environment "OPENSEARCH_ENDPOINT_ADDRESS", "localhost:3000"
    environment "SCOPE_IDENTIFIER", "https://api.sws.aws.sikt.no/scopes"
    environment "API_GATEWAY_URL", "localhost:8080"
    environment "BACKUP_ROLE_ARN", "arn:aws:s3:::dummy-arn"
    environment "API_HOST", "localhost"
    environment "COGNITO_AUTHORIZER_URLS", "http://localhost:3000"
}

tasks.withType(Checkstyle).configureEach{
    reports {
        xml.required
        html.required
        html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
    }
}