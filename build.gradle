/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/building_java_projects.html
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'checkstyle'
    id 'pmd'
}

repositories {
    gradlePluginPortal()
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'
    implementation group: 'nebula.lint', name: 'nebula.lint.gradle.plugin', version: '16.23.0'
    implementation group: 'org.jacoco', name: 'org.jacoco.core', version: '0.8.7'
    implementation group: 'org.jacoco', name: 'org.jacoco.report', version: '0.8.7'

    implementation libs.aws.java.sdk.core
    implementation libs.aws.sdk2.eventbridge
    implementation libs.aws.sdk2.regions
    implementation libs.aws.sdk2.s3
    implementation libs.aws.sdk2.urlconnectionclient


    implementation libs.bundles.jackson
    implementation libs.bundles.logging
    implementation libs.bundles.nva
    testImplementation libs.bundles.testing

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation libs.guava

    implementation libs.mockito.core

    implementation libs.nva.json
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit4 test framework
            useJUnit('4.13.2')
        }
    }
}

pmd {
    ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
    ruleSets = []
    ignoreFailures = false
}

checkstyle {
    configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
    showViolations = true
}

//jacocoTestReport {
//    reports {
//        xml.required = true
//    }
//}


test {
    environment "ALLOWED_ORIGIN", "*"
    environment "COGNITO_HOST", "https://example.com"
    environment "ELASTICSEARCH_REGION", "eu-west-1"
    environment "OPENSEARCH_ENDPOINT_ADDRESS", "localhost:3000"

    useJUnitPlatform {}
    failFast = false
    testLogging {
        events 'skipped', 'passed', 'failed'
        showCauses true
        exceptionFormat "full"
    }

//    finalizedBy jacocoTestReport
}

//jacocoTestCoverageVerification {
//    violationRules {
//        rule {
//            limit {
//                counter = 'METHOD'
//                value = 'COVEREDRATIO'
//                minimum = 1.000
//            }
//        }
//
//        rule {
//            limit {
//                counter = 'CLASS'
//                value = 'COVEREDRATIO'
//                minimum = 1.000
//            }
//        }
//    }
//}

//check.dependsOn jacocoTestCoverageVerification
//jacocoTestCoverageVerification.dependsOn(jacocoTestReport)


tasks.withType(Checkstyle) {
    reports {
        xml.required = false
        html.required = true
        html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
    }
}


def getReportTasks(JacocoReport pRootTask) {
    getProjectList().collect {
        it.tasks.withType(JacocoReport).findAll { it != pRootTask }
    }.flatten()
}


//task jacocoMerge(type: JacocoMerge) {
//    group = LifecycleBasePlugin.VERIFICATION_GROUP
//    description = 'Merge the JaCoCo data files from all subprojects into one'
//    project.afterEvaluate {
//        // do it at the end of the config phase to be sure all information is present
//        FileCollection execFiles = project.objects.fileCollection()   // an empty FileCollection
//        getProjectList().each { Project subproject ->
//            if (subproject.pluginManager.hasPlugin('jacoco')) {
//                def testTasks = subproject.tasks.withType(Test)
//                dependsOn(testTasks)   // ensure that .exec files are actually present
//
//                testTasks.each { Test task ->
//                    // The JacocoTaskExtension is the source of truth for the location of the .exec file.
//                    JacocoTaskExtension extension = task.getExtensions().findByType(JacocoTaskExtension.class)
//                    if (extension != null) {
//                        execFiles.from extension.getDestinationFile()
//                    }
//                }
//            }
//        }
//        executionData = execFiles
//    }
//    doFirst {
//        // .exec files might be missing if a project has no tests. Filter in execution phase.
//        executionData = executionData.filter { it.canRead() }
//    }
//}

//task jacocoRootReport(type: JacocoReport, dependsOn: tasks.jacocoMerge) {
//    group = LifecycleBasePlugin.VERIFICATION_GROUP
//    description = 'Generates an aggregate report from all subprojects'
//
//    logger.lifecycle 'Using aggregated file: ' + tasks.jacocoMerge.destinationFile
//    executionData.from tasks.jacocoMerge.destinationFile
//
//    project.afterEvaluate {
//        // The JacocoReport tasks are the source of truth for class files and sources.
//        def reportTasks = getReportTasks(tasks.jacocoRootReport)
//        classDirectories.from project.files({
//            reportTasks.collect { it.classDirectories }.findAll { it != null }
//        })
//        sourceDirectories.from project.files({
//            reportTasks.collect { it.sourceDirectories }.findAll { it != null }
//        })
//    }
//
//    reports {
//        xml.required = true
//    }
//}