openapi: 3.0.3
info:
  title: NVA Public Search API
  version: '0.2.0'
  description: |-
    Public search API for resources in NVA. The API is backed by Amazon ElasticSearch and uses [ElasticSearch query syntax](https://opendistro.github.io/for-elasticsearch-docs/docs/elasticsearch/full-text/).
    ## Path Parameters
    * **query** - a string containing a valid elasticrsearch query expression
    * **orderBy** - Indexed field to order results by
    * **sortOrder** - The order defaults to *desc* when sorting on the _score, and defaults to *asc* when sorting on anything else.
    * **from** - starting position of result
    * **results** - integer number of results returned
paths:
  /messages:
    get:
      description: TODO
      parameters:
        - in: path
          name: index
          description: "Index for messages related to publications"
          required: true
        - in: query
          name: viewingScope
          description: "List resources for this organization."
          required: false
          schema:
            type: string
            format: uri
            example: "https://api.dev.nva.aws.unit.no/cristin/organization/194.0.0.0"
      security:
        - CognitoUserPool: ["https://api.nva.unit.no/scopes/frontend"]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaSearchMessagesHandler.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
  /doirequests:
    get:
      description: TODO
      parameters:
        - in: path
          name: index
          description: "Index for DOI requests related to publications"
          required: true
        - in: query
          name: viewingScope
          description: "List resources for this organization."
          required: false
          schema:
            type: string
            format: uri
            example: "https://api.dev.nva.aws.unit.no/cristin/organization/194.0.0.0"
      security:
        - CognitoUserPool: ["https://api.nva.unit.no/scopes/frontend"]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaSearchDoiRequestsHandler.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
  /publishingrequests:
    get:
      description: TODO
      parameters:
        - in: path
          name: index
          description: "Index for Publishing requests related to publications"
          required: true
        - in: query
          name: viewingScope
          description: "List resources for this organization."
          required: false
          schema:
            type: string
            format: uri
            example: "https://api.dev.nva.aws.unit.no/cristin/organization/194.0.0.0"
      security:
        - CognitoUserPool: [ "https://api.nva.unit.no/scopes/frontend" ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaSearchPublishingRequestsHandler.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
  /worklist:
    get:
      description: TODO
      parameters:
        - in: query
          name: viewingScope
          description: "List resources for this organization."
          required: false
          schema:
            type: string
            format: uri
            example: "https://api.dev.nva.aws.unit.no/cristin/organization/194.0.0.0"
      security:
        - CognitoUserPool: ["https://api.nva.unit.no/scopes/frontend"]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaWorklistHandler.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
  /resources:
    get:
      description: "Search for public available publications by given criteria"
      parameters:
        - in: query
          name: query
          description: "Term to search for in resource."
          required: false
          schema:
            type: string
        - in: query
          name: orderBy
          description: "Field to order result by."
          required: false
          schema:
            type: string
        - in: query
          name: sortOrder
          description: "Order of search results (asc or desc)."
          required: false
          schema:
            type: string
        - in: query
          name: from
          description: "Start posision from results, 0-based."
          required: false
          schema:
            type: string
        - in: query
          name: results
          description: "Maximum number of publications in response."
          required: false
          schema:
            type: string
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaSearchResourcesApiFunction.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Publication"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: "500 info description"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"

components:
  schemas:
    Publication:
      type: object
      description: Structure returned from successful seach
      properties:
        abstract:
          type: string
          description: short abstract of content
        alternativeTitles:
          type: array
          description: short abstract of content
          items:
            type: string
        contributors:
          type: array
          description: List of contributing people
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
        description:
          type: string
        doi:
          type: string
        id:
          type: string
        modifiedDate:
          type: string
          format: date
        owner:
          type: string
        publicationDate:
          type: object
          properties:
            day:
              type: string
            month:
              type: string
            type:
              type: string
            year:
              type: string
        publicationType:
          type: string
        publishedDate:
          type: string
          format: date
        publisher:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
        reference:
          type: object
          properties:
            doi:
              type: string
            publicationContext:
              type: object
              properties:
                level:
                  type: string
                linkedContext:
                  type: string
                onlineIssn:
                  type: string
                openAccess:
                  type: boolean
                peerReviewed:
                  type: boolean
                printIssn:
                  type: string
                publisher:
                  type: string
                seriesTitle:
                  type: string
                title:
                  type: string
                type:
                  type: string
                url:
                  type: string
            publicationInstance:
              type: object
              properties:
                articleNumber:
                  type: string
                issue:
                  type: string
                pages:
                  type: object
                  properties:
                    begin:
                      type: string
                    end:
                      type: string
                    illustrated:
                      type: boolean
                    pages:
                      type: string
                    type:
                      type: string
                peerReviewed:
                  type: boolean
                textbookContent:
                  type: boolean
                type:
                  type: string
                volume:
                  type: string
            type:
              type: string
        tags:
          type: array
          items:
            type: string
        title:
          type: string
    Problem:
      type: object
      description: Problem object model
      properties:
        title:
          type: string
          description: Title
        status:
          type: integer
          description: Kind of problem
        detail:
          type: string
          description: details of problem
        requestId:
          type: string
          description: Identifier of the request causing the problem
  securitySchemes:
    CognitoUserPool:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
          - Ref:
              CognitoAuthorizerArn